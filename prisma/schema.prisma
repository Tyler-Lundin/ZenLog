// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  user_id      String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  role               String    @default("user")
  accounts           Account[]
  sessions           Session[]
  days               UserDay[]
  goals              Goals[]
  createdExercises   String[]
  createdFood        String[]
  createdIngredients String[]
}

model Goals {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @db.ObjectId
  userDayId      String          @db.ObjectId
  type           GoalType
  value          Int
  updatedAt      DateTime        @updatedAt
  createdAt      DateTime        @default(now())
  deadline       DateTime?
  bodyweightGoal BodyweightGoal?
  sleepGoal      SleepGoal?
  exerciseGoal   ExerciseGoal?
  meditateGoal   MeditateGoal?
  waterGoal      WaterGoal?

  User User @relation(fields: [userId], references: [id])
}

model Relationship {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  relationshipType RelationshipType
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           String           @db.ObjectId
  friendId         String           @db.ObjectId
  friendNickname   String?
}

model UserDay {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  day               Int
  month             Int
  year              Int
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.ObjectId
  BodyweightEntries String[] @db.ObjectId
  SleepEntries      String[] @db.ObjectId
  MoodEntries       String[] @db.ObjectId
  ExerciseEntries   String[] @db.ObjectId
  FoodEntries       String[] @db.ObjectId
  WaterEntries      String[] @db.ObjectId
  JournalEntries    String[] @db.ObjectId
  MeditateEntries   String[] @db.ObjectId
}

type ExerciseSet {
  reps       Int
  weight     Int
  weightUnit WeightUnit
  intensity  Int?
  toFailure  Boolean?
  notes      String?
  tags       String[]
}

model Ingredient {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  calories      Int
  servingSizeG  Int
  fatTotalG     Int
  fatSaturatedG Int
  proteinG      Int
  sodiumMG      Int
  potassiumMG   Int
  cholesterolMG Int
  carbsG        Int
  fiberG        Int
  sugarsG       Int
  foodEntry     FoodEntry @relation(fields: [foodEntryId], references: [id])
  foodEntryId   String    @db.ObjectId
}

model FoodEntry {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  ingredients Ingredient[]
  rating      Int
}

model SleepEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  userDayId String   @db.ObjectId
  hours     Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model JournalEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  userDayId String   @db.ObjectId
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MoodEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  userDayId String   @db.ObjectId
  mood      Mood
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model WaterEntry {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  amount Int
  unit   VolumeUnit
}

model MeditateEntry {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  minutes Int
}

model BodyweightEntry {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  userDayId  String     @db.ObjectId
  weight     Int
  weightUnit WeightUnit
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
}

// Exercise Models // // // // // // // // // // // // // // // // // // // // // //
// ________  ____  ____  ________  _______      ______  _____   ______   ________  
// |_   __  ||_  _||_  _||_   __  ||_   __ \   .' ___  ||_   _|.' ____ \ |_   __  | 
//   | |_ \_|  \ \  / /    | |_ \_|  | |__) | / .'   \_|  | |  | (___ \_|  | |_ \_| 
//   |  _| _    > `' <     |  _| _   |  __ /  | |         | |   _.____`.   |  _| _  
//  _| |__/ | _/ /'`\ \_  _| |__/ | _| |  \ \_\ `.___.'\ _| |_ | \____) | _| |__/ | 
// |________||____||____||________||____| |___|`.____ .'|_____| \______.'|________| 

model ExerciseEntry {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  exerciseName String
  exerciseId   String      @db.ObjectId
  set          ExerciseSet
  userDayId    String      @db.ObjectId
  updatedAt    DateTime    @updatedAt
  createdAt    DateTime    @default(now())
}

model Exercise {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  aliases          String[]
  primaryMuscles   Muscle[]
  secondaryMuscles Muscle[]
  force            Force
  skillLevel       SkillLevel
  mechanic         Mechanic
  equipment        Equipment[]
  category         Category[]
  instructions     String[]
  description      String
  tips             String[]
}

//  _________  ____  ____  _______  ________   ______   
// |  _   _  ||_  _||_  _||_   __ \|_   __  |.' ____ \  
// |_/ | | \_|  \ \  / /    | |__) | | |_ \_|| (___ \_| 
//     | |       \ \/ /     |  ___/  |  _| _  _.____`.  
//    _| |_      _|  |_    _| |_    _| |__/ || \____) | 
//   |_____|    |______|  |_____|  |________| \______.' 

type BodyweightGoal {
  target Int
}

type SleepGoal {
  totalSleep Int
}

type ExerciseGoal {
  totalReps    Int
  totalEntries Int
  totalVolume  Int
  totalWeight  Int
}

type MeditateGoal {
  totalTime Int
}

type WaterGoal {
  totalOunces  Int
  totalCups    Int
  totalGallons Int
}

//  ________  ____  _____  _____  _____  ____    ____   ______   
// |_   __  ||_   \|_   _||_   _||_   _||_   \  /   _|.' ____ \  
//   | |_ \_|  |   \ | |    | |    | |    |   \/   |  | (___ \_| 
//   |  _| _   | |\ \| |    | '    ' |    | |\  /| |   _.____`.  
//  _| |__/ | _| |_\   |_    \ \__/ /    _| |_\/_| |_ | \____) | 
// |________||_____|\____|    `.__.'    |_____||_____| \______.' 

enum Muscle {
  ABS
  BACK
  BICEPS
  BRACHIALIS
  BRACHIORADIALIS
  CALVES
  CHEST
  CORE
  DELTOIDS
  FOREARMS
  FRONT_DELTOIDS
  FULL_BODY
  GLUTES
  HAMSTRINGS
  HIP_ABDUCTORS
  HIP_FLEXORS
  HIP_ROTATORS
  INNER_THIGHS
  INNER_THIGH_ADDUCTORS
  INNER_CHEST
  LATS
  LOWER_BACK
  LOWER_BACK_SPINAL_ERECTORS
  LOWER_CHEST
  MIDDLE_BACK
  NECK
  OBLIQUES
  OUTER_THIGHS
  PECTORALS
  PERONEALS
  PIRIFORMIS
  PRONATOR_TERES
  QUADRICEPS
  REAR_DELTOIDS
  RECTUS_ABDOMINIS
  SARTORIUS
  SHOULDERS
  SIDE_HIP_GLUTES
  SERRATUS_ANTERIOR
  SOLEUS
  SUPINATOR
  TENSOR_FASCIAE_LATAE
  TRAPS
  TRICEPS
  TRANSVERSE_ABDOMINIS
  UPPER_BACK
  UPPER_BACK_RHOMBOIDS
  UPPER_CHEST
}

enum Force {
  PULL
  PUSH
  STATIC
  ROTATION
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum Mechanic {
  COMPOUND
  ISOLATION
}

enum Equipment {
  AB_WHEEL
  BARBELL
  BARBELL_COLLARS
  BENCH
  BAND
  BOSU_BALL
  BOX
  BODYWEIGHT
  CABLE
  CARDIO
  CHEST_PRESS_MACHINE
  DECLINE_BENCH
  DUMBBELL
  ELLIPTICAL
  EZ_BAR
  FOAM_ROLLER
  GLUTE_MACHINE
  GRIP_STRENGTHENER
  HYPEREXTENSION_BENCH
  INCLINE_BENCH
  JUMP_ROPE
  KETTLEBELL
  LAT_PULLDOWN_MACHINE
  LEG_ADDUCTION_MACHINE
  LEG_ABDUCTION_MACHINE
  LEG_CURL_MACHINE
  LEG_EXTENSION_MACHINE
  LEG_PRESS_MACHINE
  MACHINE
  MEDICINE_BALL
  NONE
  OTHER
  PILATES_RING
  PULL_UP_BAR
  RESISTANCE_BANDS
  RESISTANCE_MACHINE
  RESISTANCE_TUBE
  ROWING_MACHINE
  SAND_BAG
  SEATED_ROW_MACHINE
  SHOULDER_PRESS_MACHINE
  SLIDING_DISCS
  SMITH_MACHINE
  SPEED_AGILITY_LADDER
  STABILITY_BALL
  STAIR_CLIMBER
  STATIONARY_BIKE
  STEP
  TRX_SUSPENSION_TRAINER
  TREADMILL
  WEIGHT_PLATE
  YOGA_MAT
}

enum Category {
  ASSISTED_BODYWEIGHT
  BALANCE
  CALISTHENICS
  CARDIO
  CORE
  CROSSFIT
  ENDURANCE
  FLEXIBILITY
  FULL_BODY
  FUNCTIONAL_TRAINING
  MOBILITY
  OLYMPIC_WEIGHTLIFTING
  OTHER
  PILATES
  PLYOMETRICS
  POWER
  POWERLIFTING
  REHABILITATION
  STABILITY
  STRENGTH
  STRETCHING
  STRONGMAN
  WEIGHTED_BODYWEIGHT
  YOGA
}

enum Mood {
  AFFECTION
  AGITATION
  AMUSEMENT
  ANGER
  ANNOYANCE
  ANXIETY
  APATHY
  AWE
  BOREDOM
  CALM
  CONFUSION
  CONTEMPT
  CURIOSITY
  DEPRESSION
  DESIRE
  DESPAIR
  DISAPPOINTMENT
  DISGUST
  DOUBT
  EAGERNESS
  EMBARRASSMENT
  ENVY
  EXCITEMENT
  FEAR
  FRUSTRATION
  GRATITUDE
  GRIEF
  GUILT
  HAPPINESS
  HATRED
  HOPE
  HOSTILITY
  HUMILIATION
  INTEREST
  JEALOUSY
  JOY
  LONELINESS
  LOVE
  NERVOUSNESS
  OPTIMISM
  OUTRAGE
  PANIC
  PASSION
  PITY
  PRIDE
  RELIEF
  REMORSE
  RESIGNATION
  SADNESS
  SATISFACTION
  SHAME
  SHOCK
  SORROW
  SURPRISE
  SYMPATHY
  TERROR
  TRUST
  WONDER
  WORRY
  ZEAL
}

enum LengthUnit {
  METER
  CENTIMETER
  INCH
  FOOT
}

enum VolumeUnit {
  MILLILITER
  LITER
  FLUID_OUNCE
  CUP
  GALLON
}

enum TimeUnit {
  SECOND
  MINUTE
  HOUR
}

enum WeightUnit {
  GRAM
  KILOGRAM
  POUND
  OUNCE
}

enum GoalType {
  WEIGHT
  SLEEP
  EXERCISE
  MEDITATE
  WATER
}

enum RelationshipType {
  FRIEND
  FOLLOWER
  FOLLOWING
  BLOCKED
}
