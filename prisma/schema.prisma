// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  user_id      String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  role             String       @default("user")
  privacy          Privacy      @default(PUBLIC)
  accounts         Account[]
  sessions         Session[]
  dates            Date[]
  createdExercises String[]
  friendships1     Friendship[] @relation("Friendship_User1")
  friendships2     Friendship[] @relation("Friendship_User2")
  activities       Activity[]
}



model Friendship {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String           @db.ObjectId
  user2Id   String           @db.ObjectId
  status    FriendshipStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user1 User @relation("Friendship_User1", fields: [user1Id], references: [id])
  user2 User @relation("Friendship_User2", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum Privacy {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}

model Activity {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  type      ActivityType
  createdAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum ActivityType {
  ADDED_FRIEND
  CREATED_EXERCISE_ENTRY
  // add more activity types as necessary...
}

model Date {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  day             Int
  month           Int
  year            Int
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  WeightEntries   String[] @db.ObjectId
  SleepEntries    String[] @db.ObjectId
  MoodEntries     String[] @db.ObjectId
  ExerciseEntries String[] @db.ObjectId
  FoodEntries     String[] @db.ObjectId
  WaterEntries    String[] @db.ObjectId
  JournalEntries  String[] @db.ObjectId
  MeditateEntries String[] @db.ObjectId
}

model WeightEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  dateId    String   @db.ObjectId
  weight    Int
  createdAt DateTime @default(now())
}

model ExerciseEntry {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  exerciseName String        
  exerciseId   String        @db.ObjectId
  sets         ExerciseSet[]
  dateId       String        @db.ObjectId
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
}

type ExerciseSet {
  reps      Int
  weight    Int
  intensity Int
  toFailure Boolean
  notes     String
  tags      String[]
}

model Exercise {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  aliases          String[]
  primaryMuscles   Muscle[]
  secondaryMuscles Muscle[]
  force            Force
  level            Level
  mechanic         Mechanic
  equipment        Equipment[]
  category         Category[]
  instructions     String[]
  description      String
  tips             String[]
}

model Ingredient {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  calories      Int
  servingSizeG  Int
  fatTotalG     Int
  fatSaturatedG Int
  proteinG      Int
  sodiumMG      Int
  potassiumMG   Int
  cholesterolMG Int
  carbsG        Int
  fiberG        Int
  sugarsG       Int
  foodEntry     FoodEntry @relation(fields: [foodEntryId], references: [id])
  foodEntryId   String    @db.ObjectId
}

model FoodEntry {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  ingredients Ingredient[]
  rating      Int
}

model SleepEntry {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  dateId String @db.ObjectId
  hours Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model JournalEntry {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String
}

model MoodEntry {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  dateId String @db.ObjectId
  mood Mood
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model WaterEntry {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  amount Int
  unit   Unit
}

model MeditateEntry {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  minutes Int
}

enum Mood {
  HAPPY
  SAD
  ANGRY
  ANXIOUS
  EXCITED
  NEUTRAL
  // Add more moods as necessary
}

enum Unit {
  ML
  L
  OZ
  // Add more units as necessary
}

enum Muscle {
  ABS
  HAMSTRINGS
  CALVES
  SHOULDERS
  ADDUCTORS
  GLUTES
  QUADRICEPS
  BICEPS
  FOREARMS
  ABDUCTORS
  TRICEPS
  CHEST
  TRAPS
  LATS
  NECK
  LOWER_BACK
  MIDDLE_BACK
  UPPER_BACK
  BACK
  CORE
}

enum Force {
  PULL
  PUSH
  STATIC
}

enum Level {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum Mechanic {
  COMPOUND
  ISOLATION
}

enum Equipment {
  NONE
  BARBELL
  DUMBBELL
  BODYWEIGHT
  MACHINE
  CABLE
  BAND
  KETTLEBELL
  MEDICINE_BALL
  CARDIO
  PULL_UP_BAR
  OTHER
}

enum Category {
  STRENGTH
  STRETCHING
  PLYOMETRICS
  STRONGMAN
  POWERLIFTING
  CARDIO
  OLYMPIC_WEIGHTLIFTING
  CROSSFIT
  WEIGHTED_BODYWEIGHT
  ASSISTED_BODYWEIGHT
  BALANCE
  FLEXIBILITY
  ENDURANCE
  CALISTHENICS
}
